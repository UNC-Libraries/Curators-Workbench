/**
 * Copyright 2010 The University of North Carolina at Chapel Hill
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package crosswalk.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.Disposable;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import crosswalk.util.CrosswalkAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CrosswalkItemProviderAdapterFactory extends CrosswalkAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
        /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected ComposedAdapterFactory parentAdapterFactory;

        /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected IChangeNotifier changeNotifier = new ChangeNotifier();

        /**
	 * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected Disposable disposable = new Disposable();

        /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected Collection<Object> supportedTypes = new ArrayList<Object>();

        /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public CrosswalkItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

        /**
	 * This creates an adapter for a {@link crosswalk.TabbedDataField}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createTabbedDataFieldAdapter() {
		return new TabbedDataFieldItemProvider(this);
	}

        /**
	 * This creates an adapter for a {@link crosswalk.TrimWhitespace}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createTrimWhitespaceAdapter() {
		return new TrimWhitespaceItemProvider(this);
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.CurrentUsername} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurrentUsernameItemProvider currentUsernameItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.CurrentUsername}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurrentUsernameAdapter() {
		if (currentUsernameItemProvider == null) {
			currentUsernameItemProvider = new CurrentUsernameItemProvider(this);
		}

		return currentUsernameItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.CurrentDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurrentDateItemProvider currentDateItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.CurrentDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurrentDateAdapter() {
		if (currentDateItemProvider == null) {
			currentDateItemProvider = new CurrentDateItemProvider(this);
		}

		return currentDateItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.CrossWalk} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected CrossWalkItemProvider crossWalkItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.CrossWalk}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createCrossWalkAdapter() {
		if (crossWalkItemProvider == null) {
			crossWalkItemProvider = new CrossWalkItemProvider(this);
		}

		return crossWalkItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.DataField} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected DataFieldItemProvider dataFieldItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.DataField}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createDataFieldAdapter() {
		if (dataFieldItemProvider == null) {
			dataFieldItemProvider = new DataFieldItemProvider(this);
		}

		return dataFieldItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.OriginalNameRecordMatcher} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected OriginalNameRecordMatcherItemProvider originalNameRecordMatcherItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.OriginalNameRecordMatcher}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createOriginalNameRecordMatcherAdapter() {
		if (originalNameRecordMatcherItemProvider == null) {
			originalNameRecordMatcherItemProvider = new OriginalNameRecordMatcherItemProvider(this);
		}

		return originalNameRecordMatcherItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.DateRecognizer} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected DateRecognizerItemProvider dateRecognizerItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.DateRecognizer}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createDateRecognizerAdapter() {
		if (dateRecognizerItemProvider == null) {
			dateRecognizerItemProvider = new DateRecognizerItemProvider(this);
		}

		return dateRecognizerItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.Text} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected TextItemProvider textItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.Text}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.DelimitedFile} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected DelimitedFileItemProvider delimitedFileItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.DelimitedFile}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createDelimitedFileAdapter() {
		if (delimitedFileItemProvider == null) {
			delimitedFileItemProvider = new DelimitedFileItemProvider(this);
		}

		return delimitedFileItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.MappedElement} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected MappedElementItemProvider mappedElementItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.MappedElement}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createMappedElementAdapter() {
		if (mappedElementItemProvider == null) {
			mappedElementItemProvider = new MappedElementItemProvider(this);
		}

		return mappedElementItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.MappedAttribute} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected MappedAttributeItemProvider mappedAttributeItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.MappedAttribute}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createMappedAttributeAdapter() {
		if (mappedAttributeItemProvider == null) {
			mappedAttributeItemProvider = new MappedAttributeItemProvider(this);
		}

		return mappedAttributeItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.DateToISO8601StringConversion} instances.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        protected DateToISO8601StringConversionItemProvider dateToISO8601StringConversionItemProvider;

        /**
	 * This creates an adapter for a {@link crosswalk.DateToISO8601StringConversion}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter createDateToISO8601StringConversionAdapter() {
		if (dateToISO8601StringConversionItemProvider == null) {
			dateToISO8601StringConversionItemProvider = new DateToISO8601StringConversionItemProvider(this);
		}

		return dateToISO8601StringConversionItemProvider;
	}

        /**
	 * This keeps track of the one adapter used for all {@link crosswalk.Dictionary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictionaryItemProvider dictionaryItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.Dictionary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictionaryAdapter() {
		if (dictionaryItemProvider == null) {
			dictionaryItemProvider = new DictionaryItemProvider(this);
		}

		return dictionaryItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.MetadataBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataBlockItemProvider metadataBlockItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.MetadataBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetadataBlockAdapter() {
		if (metadataBlockItemProvider == null) {
			metadataBlockItemProvider = new MetadataBlockItemProvider(this);
		}

		return metadataBlockItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.InputField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputFieldItemProvider inputFieldItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.InputField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputFieldAdapter() {
		if (inputFieldItemProvider == null) {
			inputFieldItemProvider = new InputFieldItemProvider(this);
		}

		return inputFieldItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.TextInputField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextInputFieldItemProvider textInputFieldItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.TextInputField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextInputFieldAdapter() {
		if (textInputFieldItemProvider == null) {
			textInputFieldItemProvider = new TextInputFieldItemProvider(this);
		}

		return textInputFieldItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.EditingContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditingContainerItemProvider editingContainerItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.EditingContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditingContainerAdapter() {
		if (editingContainerItemProvider == null) {
			editingContainerItemProvider = new EditingContainerItemProvider(this);
		}

		return editingContainerItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.Paragraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParagraphItemProvider paragraphItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.Paragraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParagraphAdapter() {
		if (paragraphItemProvider == null) {
			paragraphItemProvider = new ParagraphItemProvider(this);
		}

		return paragraphItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.DateInputField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateInputFieldItemProvider dateInputFieldItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.DateInputField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateInputFieldAdapter() {
		if (dateInputFieldItemProvider == null) {
			dateInputFieldItemProvider = new DateInputFieldItemProvider(this);
		}

		return dateInputFieldItemProvider;
	}

								/**
	 * This keeps track of the one adapter used for all {@link crosswalk.MultiLineTextInputField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiLineTextInputFieldItemProvider multiLineTextInputFieldItemProvider;

								/**
	 * This creates an adapter for a {@link crosswalk.MultiLineTextInputField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiLineTextInputFieldAdapter() {
		if (multiLineTextInputFieldItemProvider == null) {
			multiLineTextInputFieldItemProvider = new MultiLineTextInputFieldItemProvider(this);
		}

		return multiLineTextInputFieldItemProvider;
	}

								/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

        /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

        /**
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

        /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

        /**
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

        /**
	 * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        @Override
        protected void associate(Adapter adapter, Notifier target) {
		super.associate(adapter, target);
		if (adapter != null) {
			disposable.add(adapter);
		}
	}

        /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

        /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

        /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

        /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
	 * @generated
	 */
        public void dispose() {
		disposable.dispose();
	}

}
