/**
 * Copyright 2010 The University of North Carolina at Chapel Hill
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package crosswalk.provider;

import crosswalk.util.CrosswalkAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.Disposable;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CrosswalkItemProviderAdapterFactory extends CrosswalkAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
        /**
         * This keeps track of the root adapter factory that delegates to this adapter factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ComposedAdapterFactory parentAdapterFactory;

        /**
         * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected IChangeNotifier changeNotifier = new ChangeNotifier();

        /**
         * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected Disposable disposable = new Disposable();

        /**
         * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected Collection<Object> supportedTypes = new ArrayList<Object>();

        /**
         * This constructs an instance.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public CrosswalkItemProviderAdapterFactory() {
                supportedTypes.add(IEditingDomainItemProvider.class);
                supportedTypes.add(IStructuredItemContentProvider.class);
                supportedTypes.add(ITreeItemContentProvider.class);
                supportedTypes.add(IItemLabelProvider.class);
                supportedTypes.add(IItemPropertySource.class);
        }

        /**
         * This creates an adapter for a {@link crosswalk.TabbedDataField}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTabbedDataFieldAdapter() {
                return new TabbedDataFieldItemProvider(this);
        }

        /**
         * This creates an adapter for a {@link crosswalk.TrimWhitespace}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTrimWhitespaceAdapter() {
                return new TrimWhitespaceItemProvider(this);
        }

        /**
         * This creates an adapter for a {@link crosswalk.TitleInfo}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTitleInfoAdapter() {
                return new TitleInfoItemProvider(this);
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.CrossWalk} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected CrossWalkItemProvider crossWalkItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.CrossWalk}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createCrossWalkAdapter() {
                if (crossWalkItemProvider == null) {
                        crossWalkItemProvider = new CrossWalkItemProvider(this);
                }

                return crossWalkItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.TabSeparatedFile} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TabSeparatedFileItemProvider tabSeparatedFileItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.TabSeparatedFile}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTabSeparatedFileAdapter() {
                if (tabSeparatedFileItemProvider == null) {
                        tabSeparatedFileItemProvider = new TabSeparatedFileItemProvider(this);
                }

                return tabSeparatedFileItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.DataField} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DataFieldItemProvider dataFieldItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.DataField}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDataFieldAdapter() {
                if (dataFieldItemProvider == null) {
                        dataFieldItemProvider = new DataFieldItemProvider(this);
                }

                return dataFieldItemProvider;
        }

        /**
         * This creates an adapter for a {@link crosswalk.StringInput}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createStringInputAdapter() {
                return new StringInputItemProvider(this);
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Abstract} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected AbstractItemProvider abstractItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Abstract}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createAbstractAdapter() {
                if (abstractItemProvider == null) {
                        abstractItemProvider = new AbstractItemProvider(this);
                }

                return abstractItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Genre} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected GenreItemProvider genreItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Genre}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createGenreAdapter() {
                if (genreItemProvider == null) {
                        genreItemProvider = new GenreItemProvider(this);
                }

                return genreItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Identifier} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected IdentifierItemProvider identifierItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Identifier}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createIdentifierAdapter() {
                if (identifierItemProvider == null) {
                        identifierItemProvider = new IdentifierItemProvider(this);
                }

                return identifierItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Language} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected LanguageItemProvider languageItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Language}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createLanguageAdapter() {
                if (languageItemProvider == null) {
                        languageItemProvider = new LanguageItemProvider(this);
                }

                return languageItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Name} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected NameItemProvider nameItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Name}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createNameAdapter() {
                if (nameItemProvider == null) {
                        nameItemProvider = new NameItemProvider(this);
                }

                return nameItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Subject} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected SubjectItemProvider subjectItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Subject}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createSubjectAdapter() {
                if (subjectItemProvider == null) {
                        subjectItemProvider = new SubjectItemProvider(this);
                }

                return subjectItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.TypeOfResource} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TypeOfResourceItemProvider typeOfResourceItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.TypeOfResource}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTypeOfResourceAdapter() {
                if (typeOfResourceItemProvider == null) {
                        typeOfResourceItemProvider = new TypeOfResourceItemProvider(this);
                }

                return typeOfResourceItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.OriginalNameRecordMatcher} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected OriginalNameRecordMatcherItemProvider originalNameRecordMatcherItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.OriginalNameRecordMatcher}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createOriginalNameRecordMatcherAdapter() {
                if (originalNameRecordMatcherItemProvider == null) {
                        originalNameRecordMatcherItemProvider = new OriginalNameRecordMatcherItemProvider(this);
                }

                return originalNameRecordMatcherItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.DateCreated} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DateCreatedItemProvider dateCreatedItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.DateCreated}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDateCreatedAdapter() {
                if (dateCreatedItemProvider == null) {
                        dateCreatedItemProvider = new DateCreatedItemProvider(this);
                }

                return dateCreatedItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.DateInput} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DateInputItemProvider dateInputItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.DateInput}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDateInputAdapter() {
                if (dateInputItemProvider == null) {
                        dateInputItemProvider = new DateInputItemProvider(this);
                }

                return dateInputItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.DateRecognizer} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DateRecognizerItemProvider dateRecognizerItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.DateRecognizer}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDateRecognizerAdapter() {
                if (dateRecognizerItemProvider == null) {
                        dateRecognizerItemProvider = new DateRecognizerItemProvider(this);
                }

                return dateRecognizerItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.Text} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TextItemProvider textItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.Text}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTextAdapter() {
                if (textItemProvider == null) {
                        textItemProvider = new TextItemProvider(this);
                }

                return textItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link crosswalk.AccessCondition} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected AccessConditionItemProvider accessConditionItemProvider;

        /**
         * This creates an adapter for a {@link crosswalk.AccessCondition}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createAccessConditionAdapter() {
                if (accessConditionItemProvider == null) {
                        accessConditionItemProvider = new AccessConditionItemProvider(this);
                }

                return accessConditionItemProvider;
        }

        /**
         * This returns the root adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public ComposeableAdapterFactory getRootAdapterFactory() {
                return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
        }

        /**
         * This sets the composed adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
                this.parentAdapterFactory = parentAdapterFactory;
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public boolean isFactoryForType(Object type) {
                return supportedTypes.contains(type) || super.isFactoryForType(type);
        }

        /**
         * This implementation substitutes the factory itself as the key for the adapter.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter adapt(Notifier notifier, Object type) {
                return super.adapt(notifier, this);
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Object adapt(Object object, Object type) {
                if (isFactoryForType(type)) {
                        Object adapter = super.adapt(object, type);
                        if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                                return adapter;
                        }
                }

                return null;
        }

        /**
         * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        protected void associate(Adapter adapter, Notifier target) {
                super.associate(adapter, target);
                if (adapter != null) {
                        disposable.add(adapter);
                }
        }

        /**
         * This adds a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void addListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.addListener(notifyChangedListener);
        }

        /**
         * This removes a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void removeListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.removeListener(notifyChangedListener);
        }

        /**
         * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void fireNotifyChanged(Notification notification) {
                changeNotifier.fireNotifyChanged(notification);

                if (parentAdapterFactory != null) {
                        parentAdapterFactory.fireNotifyChanged(notification);
                }
        }

        /**
         * This disposes all of the item providers created by this factory. 
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void dispose() {
                disposable.dispose();
        }

}
