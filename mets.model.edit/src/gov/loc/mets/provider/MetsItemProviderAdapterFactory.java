/**
 * Copyright 2010 The University of North Carolina at Chapel Hill
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.loc.mets.provider;

import gov.loc.mets.util.MetsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.Disposable;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetsItemProviderAdapterFactory extends MetsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
        /**
         * This keeps track of the root adapter factory that delegates to this adapter factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ComposedAdapterFactory parentAdapterFactory;

        /**
         * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected IChangeNotifier changeNotifier = new ChangeNotifier();

        /**
         * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected Disposable disposable = new Disposable();

        /**
         * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected Collection<Object> supportedTypes = new ArrayList<Object>();

        /**
         * This constructs an instance.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public MetsItemProviderAdapterFactory() {
                supportedTypes.add(IEditingDomainItemProvider.class);
                supportedTypes.add(IStructuredItemContentProvider.class);
                supportedTypes.add(ITreeItemContentProvider.class);
                supportedTypes.add(IItemLabelProvider.class);
                supportedTypes.add(IItemPropertySource.class);
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.AgentType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected AgentTypeItemProvider agentTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.AgentType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createAgentTypeAdapter() {
                if (agentTypeItemProvider == null) {
                        agentTypeItemProvider = new AgentTypeItemProvider(this);
                }

                return agentTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.AltRecordIDType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected AltRecordIDTypeItemProvider altRecordIDTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.AltRecordIDType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createAltRecordIDTypeAdapter() {
                if (altRecordIDTypeItemProvider == null) {
                        altRecordIDTypeItemProvider = new AltRecordIDTypeItemProvider(this);
                }

                return altRecordIDTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.AmdSecType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected AmdSecTypeItemProvider amdSecTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.AmdSecType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createAmdSecTypeAdapter() {
                if (amdSecTypeItemProvider == null) {
                        amdSecTypeItemProvider = new AmdSecTypeItemProvider(this);
                }

                return amdSecTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.AreaType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected AreaTypeItemProvider areaTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.AreaType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createAreaTypeAdapter() {
                if (areaTypeItemProvider == null) {
                        areaTypeItemProvider = new AreaTypeItemProvider(this);
                }

                return areaTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.BehaviorSecType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected BehaviorSecTypeItemProvider behaviorSecTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.BehaviorSecType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createBehaviorSecTypeAdapter() {
                if (behaviorSecTypeItemProvider == null) {
                        behaviorSecTypeItemProvider = new BehaviorSecTypeItemProvider(this);
                }

                return behaviorSecTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.BehaviorType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected BehaviorTypeItemProvider behaviorTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.BehaviorType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createBehaviorTypeAdapter() {
                if (behaviorTypeItemProvider == null) {
                        behaviorTypeItemProvider = new BehaviorTypeItemProvider(this);
                }

                return behaviorTypeItemProvider;
        }

        /**
         * This creates an adapter for a {@link gov.loc.mets.DivType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDivTypeAdapter() {
                return new DivTypeItemProvider(this);
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.DocumentRoot} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DocumentRootItemProvider documentRootItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.DocumentRoot}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDocumentRootAdapter() {
                if (documentRootItemProvider == null) {
                        documentRootItemProvider = new DocumentRootItemProvider(this);
                }

                return documentRootItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FContentType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FContentTypeItemProvider fContentTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FContentType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFContentTypeAdapter() {
                if (fContentTypeItemProvider == null) {
                        fContentTypeItemProvider = new FContentTypeItemProvider(this);
                }

                return fContentTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FileGrpType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FileGrpTypeItemProvider fileGrpTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FileGrpType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFileGrpTypeAdapter() {
                if (fileGrpTypeItemProvider == null) {
                        fileGrpTypeItemProvider = new FileGrpTypeItemProvider(this);
                }

                return fileGrpTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FileGrpType1} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FileGrpType1ItemProvider fileGrpType1ItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FileGrpType1}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFileGrpType1Adapter() {
                if (fileGrpType1ItemProvider == null) {
                        fileGrpType1ItemProvider = new FileGrpType1ItemProvider(this);
                }

                return fileGrpType1ItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FileSecType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FileSecTypeItemProvider fileSecTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FileSecType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFileSecTypeAdapter() {
                if (fileSecTypeItemProvider == null) {
                        fileSecTypeItemProvider = new FileSecTypeItemProvider(this);
                }

                return fileSecTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FileType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FileTypeItemProvider fileTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FileType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFileTypeAdapter() {
                if (fileTypeItemProvider == null) {
                        fileTypeItemProvider = new FileTypeItemProvider(this);
                }

                return fileTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FLocatType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FLocatTypeItemProvider fLocatTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FLocatType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFLocatTypeAdapter() {
                if (fLocatTypeItemProvider == null) {
                        fLocatTypeItemProvider = new FLocatTypeItemProvider(this);
                }

                return fLocatTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.FptrType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected FptrTypeItemProvider fptrTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.FptrType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createFptrTypeAdapter() {
                if (fptrTypeItemProvider == null) {
                        fptrTypeItemProvider = new FptrTypeItemProvider(this);
                }

                return fptrTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MdRefType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MdRefTypeItemProvider mdRefTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MdRefType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMdRefTypeAdapter() {
                if (mdRefTypeItemProvider == null) {
                        mdRefTypeItemProvider = new MdRefTypeItemProvider(this);
                }

                return mdRefTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MdSecType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MdSecTypeItemProvider mdSecTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MdSecType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMdSecTypeAdapter() {
                if (mdSecTypeItemProvider == null) {
                        mdSecTypeItemProvider = new MdSecTypeItemProvider(this);
                }

                return mdSecTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MdWrapType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MdWrapTypeItemProvider mdWrapTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MdWrapType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMdWrapTypeAdapter() {
                if (mdWrapTypeItemProvider == null) {
                        mdWrapTypeItemProvider = new MdWrapTypeItemProvider(this);
                }

                return mdWrapTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MetsDocumentIDType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MetsDocumentIDTypeItemProvider metsDocumentIDTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MetsDocumentIDType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMetsDocumentIDTypeAdapter() {
                if (metsDocumentIDTypeItemProvider == null) {
                        metsDocumentIDTypeItemProvider = new MetsDocumentIDTypeItemProvider(this);
                }

                return metsDocumentIDTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MetsHdrType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MetsHdrTypeItemProvider metsHdrTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MetsHdrType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMetsHdrTypeAdapter() {
                if (metsHdrTypeItemProvider == null) {
                        metsHdrTypeItemProvider = new MetsHdrTypeItemProvider(this);
                }

                return metsHdrTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MetsType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MetsTypeItemProvider metsTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MetsType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMetsTypeAdapter() {
                if (metsTypeItemProvider == null) {
                        metsTypeItemProvider = new MetsTypeItemProvider(this);
                }

                return metsTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MetsType1} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MetsType1ItemProvider metsType1ItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MetsType1}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMetsType1Adapter() {
                if (metsType1ItemProvider == null) {
                        metsType1ItemProvider = new MetsType1ItemProvider(this);
                }

                return metsType1ItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.MptrType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MptrTypeItemProvider mptrTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.MptrType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMptrTypeAdapter() {
                if (mptrTypeItemProvider == null) {
                        mptrTypeItemProvider = new MptrTypeItemProvider(this);
                }

                return mptrTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.ObjectType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ObjectTypeItemProvider objectTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.ObjectType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createObjectTypeAdapter() {
                if (objectTypeItemProvider == null) {
                        objectTypeItemProvider = new ObjectTypeItemProvider(this);
                }

                return objectTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.ParType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ParTypeItemProvider parTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.ParType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createParTypeAdapter() {
                if (parTypeItemProvider == null) {
                        parTypeItemProvider = new ParTypeItemProvider(this);
                }

                return parTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.SeqType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected SeqTypeItemProvider seqTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.SeqType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createSeqTypeAdapter() {
                if (seqTypeItemProvider == null) {
                        seqTypeItemProvider = new SeqTypeItemProvider(this);
                }

                return seqTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.SmArcLinkType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected SmArcLinkTypeItemProvider smArcLinkTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.SmArcLinkType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createSmArcLinkTypeAdapter() {
                if (smArcLinkTypeItemProvider == null) {
                        smArcLinkTypeItemProvider = new SmArcLinkTypeItemProvider(this);
                }

                return smArcLinkTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.SmLinkGrpType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected SmLinkGrpTypeItemProvider smLinkGrpTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.SmLinkGrpType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createSmLinkGrpTypeAdapter() {
                if (smLinkGrpTypeItemProvider == null) {
                        smLinkGrpTypeItemProvider = new SmLinkGrpTypeItemProvider(this);
                }

                return smLinkGrpTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.SmLinkType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected SmLinkTypeItemProvider smLinkTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.SmLinkType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createSmLinkTypeAdapter() {
                if (smLinkTypeItemProvider == null) {
                        smLinkTypeItemProvider = new SmLinkTypeItemProvider(this);
                }

                return smLinkTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.SmLocatorLinkType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected SmLocatorLinkTypeItemProvider smLocatorLinkTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.SmLocatorLinkType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createSmLocatorLinkTypeAdapter() {
                if (smLocatorLinkTypeItemProvider == null) {
                        smLocatorLinkTypeItemProvider = new SmLocatorLinkTypeItemProvider(this);
                }

                return smLocatorLinkTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.StreamType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected StreamTypeItemProvider streamTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.StreamType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createStreamTypeAdapter() {
                if (streamTypeItemProvider == null) {
                        streamTypeItemProvider = new StreamTypeItemProvider(this);
                }

                return streamTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.StructLinkType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected StructLinkTypeItemProvider structLinkTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.StructLinkType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createStructLinkTypeAdapter() {
                if (structLinkTypeItemProvider == null) {
                        structLinkTypeItemProvider = new StructLinkTypeItemProvider(this);
                }

                return structLinkTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.StructLinkType1} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected StructLinkType1ItemProvider structLinkType1ItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.StructLinkType1}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createStructLinkType1Adapter() {
                if (structLinkType1ItemProvider == null) {
                        structLinkType1ItemProvider = new StructLinkType1ItemProvider(this);
                }

                return structLinkType1ItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.StructMapType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected StructMapTypeItemProvider structMapTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.StructMapType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createStructMapTypeAdapter() {
                if (structMapTypeItemProvider == null) {
                        structMapTypeItemProvider = new StructMapTypeItemProvider(this);
                }

                return structMapTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.TransformFileType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TransformFileTypeItemProvider transformFileTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.TransformFileType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTransformFileTypeAdapter() {
                if (transformFileTypeItemProvider == null) {
                        transformFileTypeItemProvider = new TransformFileTypeItemProvider(this);
                }

                return transformFileTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.XmlDataType} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected XmlDataTypeItemProvider xmlDataTypeItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.XmlDataType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createXmlDataTypeAdapter() {
                if (xmlDataTypeItemProvider == null) {
                        xmlDataTypeItemProvider = new XmlDataTypeItemProvider(this);
                }

                return xmlDataTypeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link gov.loc.mets.XmlDataType1} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected XmlDataType1ItemProvider xmlDataType1ItemProvider;

        /**
         * This creates an adapter for a {@link gov.loc.mets.XmlDataType1}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createXmlDataType1Adapter() {
                if (xmlDataType1ItemProvider == null) {
                        xmlDataType1ItemProvider = new XmlDataType1ItemProvider(this);
                }

                return xmlDataType1ItemProvider;
        }

        /**
         * This returns the root adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public ComposeableAdapterFactory getRootAdapterFactory() {
                return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
        }

        /**
         * This sets the composed adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
                this.parentAdapterFactory = parentAdapterFactory;
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public boolean isFactoryForType(Object type) {
                return supportedTypes.contains(type) || super.isFactoryForType(type);
        }

        /**
         * This implementation substitutes the factory itself as the key for the adapter.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter adapt(Notifier notifier, Object type) {
                return super.adapt(notifier, this);
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Object adapt(Object object, Object type) {
                if (isFactoryForType(type)) {
                        Object adapter = super.adapt(object, type);
                        if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                                return adapter;
                        }
                }

                return null;
        }

        /**
         * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        protected void associate(Adapter adapter, Notifier target) {
                super.associate(adapter, target);
                if (adapter != null) {
                        disposable.add(adapter);
                }
        }

        /**
         * This adds a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void addListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.addListener(notifyChangedListener);
        }

        /**
         * This removes a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void removeListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.removeListener(notifyChangedListener);
        }

        /**
         * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void fireNotifyChanged(Notification notification) {
                changeNotifier.fireNotifyChanged(notification);

                if (parentAdapterFactory != null) {
                        parentAdapterFactory.fireNotifyChanged(notification);
                }
        }

        /**
         * This disposes all of the item providers created by this factory. 
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void dispose() {
                disposable.dispose();
        }

}
